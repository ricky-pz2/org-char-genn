(load "gen-basic-dnd")
(load "gen-class")
(load "gen-creatures")
(load "gen-ctraits")
(load "gen-gods")
(load "gen-hooks")
(load "gen-items")
(load "gen-names")
(load "gen-other")
(load "gen-quirks")
(load "gen-races")
(load "gen-dice")

(defvar *chargender* (list "M" "F"))
(defvar *charrace*
  (apply 'append
         (make-list 4 "Dragonborn")
         nil
         (make-list 11 "Dwarf")
         nil
         (make-list 16 "Elf")
         nil
         (make-list 7 "Gnome")
         nil
         (make-list 8 "Halfling")
         nil
         (make-list 25 "Half-elf")
         nil
         (make-list 5 "Half-orc")
         nil
         (make-list 70 "Human")
         nil
         (make-list 4 "Tiefling")
         nil
         )
  )

(defvar *gender* nil)
(defvar *race* nil)
(defvar *name* nil)
(defvar *age* nil)
(defvar *occupation* nil)
(defvar *hair* nil)
(defvar *eyes* nil)
(defvar *skin* nil)
(defvar *height* nil)
(defvar *build* nil)
(defvar *face* nil)
(defvar *special1* nil)
(defvar *special2* nil)
(defvar *orientation* nil)
(defvar *relationstatus* nil)
(defvar *religion* nil)
(defvar *trait1* nil)
(defvar *trait2* nil)
(defvar *quirk* nil)
(defvar *hook* nil)
(defvar *str* nil)
(defvar *dex* nil)
(defvar *con* nil)
(defvar *int* nil)
(defvar *wis* nil)
(defvar *cha* nil)

(defun dragonborn-race
    (gender)
  (setf *name* (dragon-born-name))
  (setf *age* (seq-random-elt (number-sequence 16 80)))
  (setf *occupation* (occupation))
  (setf *hair* (dragon-hair))
  (setf *eyes* (eye-color))
  (setf *skin* (concat (dragon-skin) " skin"))
  (setf *height* (seq-random-elt (number-sequence 68 82)))
  (setf *build* (strong-weight))
  (setf *face* (concat (face-shape) " " (attractiveness)))
  (setf *special1* (special-physical-1))
  (setf *special2* (special-physical-2))
  (setf *orientation* (orientation))
  (setf *relationstatus* (relationship-status))
  (setf *religion* (dragon-god))
  (setf *trait1* (random-traits-1))
  (setf *trait2* (random-traits-2))
  (setf *quirk* (dragon-quirks))
  (setf *hook* (hooks))
  (setf *str* (+ (d6) (d6) (d6)))
  (setf *dex* (+ (d6) (d6) (d6)))
  (setf *con* (+ (d6) (d6) (d6)))
  (setf *int* (+ (d6) (d6) (d6)))
  (setf *wis* (+ (d6) (d6) (d6)))
  (setf *cha* (+ (d6) (d6) (d6)))
  )

(defun dwarf-race
    (gender)
  (setf *name*
        (if (string-equal gender "M")
            (concat (male-dwarf-name) " " (dwarf-surname))
          (concat (female-dwarf-name) " " (dwarf-surname))
          )
        )
  (setf *age* (seq-random-elt (number-sequence 50 350)))
  (setf *occupation* (occupation))
  (setf *hair* (hair))
  (setf *eyes* (eye-color))
  (setf *skin* (human-skin))
  (setf *height* (seq-random-elt (number-sequence 46 54)))
  (setf *build* (strong-weight))
  (setf *face*
        (if (string-equal gender "M")
            (concat (face-shape) " " (attractiveness) "face " (beard))
          (concat (face-shape) " " (attractiveness))
          )
        )
  (setf *special1* (special-physical-1))
  (setf *special2* (special-physical-2))
  (setf *orientation* (orientation))
  (setf *relationstatus* (relationship-status))
  (setf *religion* (dwarf-god))
  (setf *trait1* (random-traits-1))
  (setf *trait2* (random-traits-2))
  (setf *quirk* (dwarf-quirks))
  (setf *hook* (hooks))
  (setf *str* (+ (d6) (d6) (d6)))
  (setf *dex* (+ (d6) (d6) (d6)))
  (setf *con* (+ (d6) (d6) (d6)))
  (setf *int* (+ (d6) (d6) (d6)))
  (setf *wis* (+ (d6) (d6) (d6)))
  (setf *cha* (+ (d6) (d6) (d6)))
  )        

(defun elf-race
    (gender)
  (setf *name*
        (if (string-equal gender "M")
            (concat (male-elf-name) " " (elf-surname))
          (concat (female-elf-name) " " (elf-surname))
          )
        )
  (setf *age* (seq-random-elt (number-sequence 16 750)))
  (setf *occupation* (occupation))
  (setf *hair* (hair))
  (setf *eyes* (eye-color))
  (setf *skin* (elf-skin))
  (setf *height* (seq-random-elt (number-sequence 55 74)))
  (setf *build* (mapconcat 'identity (light-weight) " "))
  (setf *face*
        (concat (face-shape) " " (attractiveness)))
  (setf *special1* (special-physical-1))
  (setf *special2* (special-physical-2))
  (setf *orientation* (orientation))
  (setf *relationstatus* (relationship-status))
  (setf *religion* (religion-select))
  (setf *trait1* (random-traits-1))
  (setf *trait2* (random-traits-2))
  (setf *quirk* (elf-quirks))
  (setf *hook* (hooks))
  (setf *str* (+ (d6) (d6) (d6)))
  (setf *dex* (+ (d6) (d6) (d6)))
  (setf *con* (+ (d6) (d6) (d6)))
  (setf *int* (+ (d6) (d6) (d6)))
  (setf *wis* (+ (d6) (d6) (d6)))
  (setf *cha* (+ (d6) (d6) (d6)))
  )

(defun gnome-race
    (gender)
  (setf *name*
        (if (string-equal gender "M")
            (concat (male-gnome-name) " " (human-surname))
          (concat (female-gnome-name) " " (human-surname))
         )
       )
  (setf *age* (seq-random-elt (number-sequence 16 500)))
  (setf *occupation* (occupation))
  (setf *hair* (hair))
  (setf *eyes* (eye-color))
  (setf *skin* (nonhuman-skin))
  (setf *height* (seq-random-elt (number-sequence 37 43)))
  (setf *build* (weight))
  (setf *face*
        (if (string-equal gender "M")
            (concat (face-shape) " " (attractiveness) "face " (beard))
          (concat (face-shape) " " (attractiveness))
         )
       )
  (setf *special1* (special-physical-1))
  (setf *special2* (special-physical-2))
  (setf *orientation* (orientation))
  (setf *relationstatus* (relationship-status))
  (setf *religion* (gnome-god))
  (setf *trait1* (random-traits-1))
  (setf *trait2* (random-traits-2))
  (setf *quirk* (gnome-quirks))
  (setf *hook* (hooks))
  (setf *str* (+ (d6) (d6) (d6)))
  (setf *dex* (+ (d6) (d6) (d6)))
  (setf *con* (+ (d6) (d6) (d6)))
  (setf *int* (+ (d6) (d6) (d6)))
  (setf *wis* (+ (d6) (d6) (d6)))
  (setf *cha* (+ (d6) (d6) (d6)))
 )

(defun halfling-race
    (gender)
  (setf *name*
        (if (string-equal gender "M")
            (concat (male-halfing-name) " " (halfling-surname))
          (concat (female-halfing-name) " " (halfling-surname))
          )
        )
  (setf *age* (seq-random-elt (number-sequence 16 160)))
  (setf *occupation* (occupation))
  (setf *hair* (hair))
  (setf *eyes* (eye-color))
  (setf *skin* (nonhuman-skin))
  (setf *height* (seq-random-elt (number-sequence 33 39)))
  (setf *build* (weight))
  (setf *face*
        (if (string-equal gender "M")
            (concat (face-shape) " " (attractiveness) "face " (beard))
          (concat (face-shape) " " (attractiveness))
          )
        )
  (setf *special1* (special-physical-1))
  (setf *special2* (special-physical-2))
  (setf *orientation* (orientation))
  (setf *relationstatus* (relationship-status))
  (setf *religion* (halfing-god))
  (setf *trait1* (random-traits-1))
  (setf *trait2* (random-traits-2))
  (setf *quirk* (half-quirks))
  (setf *hook* (hooks))
  (setf *str* (+ (d6) (d6) (d6)))
  (setf *dex* (+ (d6) (d6) (d6)))
  (setf *con* (+ (d6) (d6) (d6)))
  (setf *int* (+ (d6) (d6) (d6)))
  (setf *wis* (+ (d6) (d6) (d6)))
  (setf *cha* (+ (d6) (d6) (d6)))
 )

(defun half-elf-race
    (gender)
  (setf *name*
        (if (string-equal gender "M")
            (concat (male-human-name) " " (elf-surname))
          (concat (female-human-name) " " (elf-surname))
          )
        )
  (setf *age* (seq-random-elt (number-sequence 16 160)))
  (setf *occupation* (occupation))
  (setf *hair* (hair))
  (setf *eyes* (eye-color))
  (setf *skin* (elf-skin))
  (setf *height* (seq-random-elt (number-sequence 58 78)))
  (setf *build* (weight))
  (setf *face*
        (if (string-equal gender "M")
            (concat (face-shape) " " (attractiveness) "face " (beard))
          (concat (face-shape) " " (attractiveness))
          )
        )
  (setf *special1* (special-physical-1))
  (setf *special2* (special-physical-2))
  (setf *orientation* (orientation))
  (setf *relationstatus* (relationship-status))
  (setf *religion* (human-god))
  (setf *trait1* (random-traits-1))
  (setf *trait2* (random-traits-2))
  (setf *quirk* (random-quirks))
  (setf *hook* (hooks))
  (setf *str* (+ (d6) (d6) (d6)))
  (setf *dex* (+ (d6) (d6) (d6)))
  (setf *con* (+ (d6) (d6) (d6)))
  (setf *int* (+ (d6) (d6) (d6)))
  (setf *wis* (+ (d6) (d6) (d6)))
  (setf *cha* (+ (d6) (d6) (d6)))
 )

(defun half-orc-race
    (gender)
  (setf *name*
        (if (string-equal gender "M")
            (concat (male-orc-name) " " (human-surname))
          (concat (female-orc-name) " " (human-surname))
          )
        )
  (setf *age* (seq-random-elt (number-sequence 16 75)))
  (setf *occupation* (occupation))
  (setf *hair* (hair))
  (setf *eyes* (eye-color))
  (setf *skin* (human-skin))
  (setf *height* (seq-random-elt (number-sequence 60 78)))
  (setf *build* (strong-weight))
  (setf *face*
        (if (string-equal gender "M")
            (concat (face-shape) " " (attractiveness) "face " (beard))
          (concat (face-shape) " " (attractiveness))
          )
        )
  (setf *special1* (special-physical-1))
  (setf *special2* (special-physical-2))
  (setf *orientation* (orientation))
  (setf *relationstatus* (relationship-status))
  (setf *religion* (human-god))
  (setf *trait1* (random-traits-1))
  (setf *trait2* (random-traits-2))
  (setf *quirk* (random-quirks))
  (setf *hook* (hooks))
  (setf *str* (+ (d6) (d6) (d6)))
  (setf *dex* (+ (d6) (d6) (d6)))
  (setf *con* (+ (d6) (d6) (d6)))
  (setf *int* (+ (d6) (d6) (d6)))
  (setf *wis* (+ (d6) (d6) (d6)))
  (setf *cha* (+ (d6) (d6) (d6)))
 )

(defun human-race
    (gender)
  (setf *name*
        (if (string-equal gender "M")
            (concat (male-human-name) " " (human-surname))
          (concat (female-human-name) " " (human-surname))
          )
        )
  (setf *age* (seq-random-elt (number-sequence 16 80)))
  (setf *occupation* (occupation))
  (setf *hair* (hair))
  (setf *eyes* (eye-color))
  (setf *skin* (human-skin))
  (setf *height* (seq-random-elt (number-sequence 58 78)))
  (setf *build* (weight))
  (setf *face*
        (if (string-equal gender "M")
            (concat (face-shape) " " (attractiveness) "face " (beard))
          (concat (face-shape) " " (attractiveness))
          )
        )
  (setf *special1* (special-physical-1))
  (setf *special2* (special-physical-2))
  (setf *orientation* (orientation))
  (setf *relationstatus* (relationship-status))
  (setf *religion* (human-god))
  (setf *trait1* (random-traits-1))
  (setf *trait2* (random-traits-2))
  (setf *quirk* (random-quirks))
  (setf *hook* (hooks))
  (setf *str* (+ (d6) (d6) (d6)))
  (setf *dex* (+ (d6) (d6) (d6)))
  (setf *con* (+ (d6) (d6) (d6)))
  (setf *int* (+ (d6) (d6) (d6)))
  (setf *wis* (+ (d6) (d6) (d6)))
  (setf *cha* (+ (d6) (d6) (d6)))
 )

(defun tiefling-race
    (gender)
  (setf *name* (tiefling-name))
  (setf *age* (seq-random-elt (number-sequence 16 90)))
  (setf *occupation* (occupation))
  (setf *hair* (hair))
  (setf *eyes* (eye-color))
  (setf *skin* (tiefling-skin))
  (setf *height* (seq-random-elt (number-sequence 59 73)))
  (setf *build* (light-weight))
  (setf *face*
        (if (string-equal gender "M")
            (concat (face-shape) " " (attractiveness) "face " (beard))
          (concat (face-shape) " " (attractiveness))
          )
        )
  (setf *special1* (special-physical-1))
  (setf *special2* (special-physical-2))
  (setf *orientation* (orientation))
  (setf *relationstatus* (relationship-status))
  (setf *religion* (human-god))
  (setf *trait1* (random-traits-1))
  (setf *trait2* (random-traits-2))
  (setf *quirk* (random-quirks))
  (setf *hook* (hooks))
  (setf *str* (+ (d6) (d6) (d6)))
  (setf *dex* (+ (d6) (d6) (d6)))
  (setf *con* (+ (d6) (d6) (d6)))
  (setf *int* (+ (d6) (d6) (d6)))
  (setf *wis* (+ (d6) (d6) (d6)))
  (setf *cha* (+ (d6) (d6) (d6)))
 )

(defun inches-to-feet
    (inches)
  (concat (number-to-string (/ inches 12)) "\" " (number-to-string (mod inches 12)) "'")
  )

(defun npc-generate
    (&optional gender race)
  "Creates an npc with an specified Gender or Race.
   Gender can be M or F.
   Race can be Dragonborn, Dwarf, Elf, Gnome, Halfling,
   Half-elf, Half-orc, Human, Tiefling.
   "
  (interactive)
  (setf *gender* nil)
  (setf *race* nil)
  (if (string-equal gender nil)
      (setf *gender*
            (seq-random-elt *chargender*)
            )
    (setf *gender* gender))
  ;; set race
  (if (string-equal race nil)
      (setf *race*
            (seq-random-elt *charrace*)
            )
    (setf *race* race)
    )
  ;; Race conditionals
  (if (string-equal *race* "Dragonborn")
      (dragonborn-race *gender*))
  (if (string-equal *race* "Dwarf")
      (dwarf-race *gender*))
  (if (string-equal *race* "Elf")
      (elf-race *gender*))
  (if (string-equal *race* "Gnome")
      (gnome-race *gender*))
  (if (string-equal *race* "Halfling")
      (halfling-race *gender*))
  (if (string-equal *race* "Half-elf")
      (half-elf-race *gender*))
  (if (string-equal *race* "Half-orc")
      (half-orc-race *gender*))
  (if (string-equal *race* "Human")
      (human-race *gender*))
  (if (string-equal *race* "Tiefling")
      (tiefling-race *gender*)
    )
  ;; Write Stats to screen
  (insert (concat ":NAME: " *name* "\n"))
  (insert (concat ":RACE: " *race* "\n"))
  (insert (concat ":SEX: " *gender* "\n"))
  (insert (concat ":AGE: " (number-to-string *age*) "\n"))
  (insert (concat ":OCCUPATION: "  *occupation* "\n"))
  (insert (concat ":FACE: " *face* "\n"))
  (insert (concat ":HAIR: " *hair* "\n"))
  (insert (concat ":SKIN: " *skin* "\n"))
  (insert (concat ":EYES: " *eyes* "\n"))
  (insert (concat ":HEIGHT: " (inches-to-feet *height*) "\n"))
  (insert (concat ":BUILD: " *build* "\n"))
  (insert (concat ":PERSONALITY: "
                  *special1* "\n "
                  *special2* "\n "
                  *trait1* "\n"
                  *trait2* "\n"
                  )
          )
  (insert (concat ":ORIENTATION: " *orientation* "\n"))
  (insert (concat ":RELATIONSHIP: " *relationstatus* "\n"))
  (insert (concat ":RELIGION: " *religion* "\n"))
  (insert (concat ":QUIRK: " *quirk* "\n"))
  (insert (concat ":HOOK: " *hook* "\n"))
  (insert (concat ":STR: " (number-to-string *str*) "\n"))
  (insert (concat ":DEX: " (number-to-string *dex*) "\n"))
  (insert (concat ":CON: " (number-to-string *con*) "\n"))
  (insert (concat ":INT: " (number-to-string *int*) "\n"))
  (insert (concat ":WIS: " (number-to-string *wis*) "\n"))
  (insert (concat ":CHA: " (number-to-string *cha*) "\n"))
  )

(defun npc-generate-male
    (&optional race)
  "Creates an npc with an specified Gender or Race.
   Gender can be M or F.
   Race can be Dragonborn, Dwarf, Elf, Gnome, Halfling,
   Half-elf, Half-orc, Human, Tiefling.
   "
  (interactive)
  (setf *gender* "M")
  (setf *race* nil)
  ;; set race
  (if (string-equal race nil)
      (setf *race*
            (seq-random-elt *charrace*)
            )
    (setf *race* race)
    )
  ;; Race conditionals
  (if (string-equal *race* "Dragonborn")
      (dragonborn-race *gender*))
  (if (string-equal *race* "Dwarf")
      (dwarf-race *gender*))
  (if (string-equal *race* "Elf")
      (elf-race *gender*))
  (if (string-equal *race* "Gnome")
      (gnome-race *gender*))
  (if (string-equal *race* "Halfling")
      (halfling-race *gender*))
  (if (string-equal *race* "Half-elf")
      (half-elf-race *gender*))
  (if (string-equal *race* "Half-orc")
      (half-orc-race *gender*))
  (if (string-equal *race* "Human")
      (human-race *gender*))
  (if (string-equal *race* "Tiefling")
      (tiefling-race *gender*)
    )
  ;; Write Stats to screen
  (insert (concat ":NAME: " *name* "\n"))
  (insert (concat ":RACE: " *race* "\n"))
  (insert (concat ":SEX: " *gender* "\n"))
  (insert (concat ":AGE: " (number-to-string *age*) "\n"))
  (insert (concat ":OCCUPATION: "  *occupation* "\n"))
  (insert (concat ":FACE: " *face* "\n"))
  (insert (concat ":HAIR: " *hair* "\n"))
  (insert (concat ":SKIN: " *skin* "\n"))
  (insert (concat ":EYES: " *eyes* "\n"))
  (insert (concat ":HEIGHT: " (inches-to-feet *height*) "\n"))
  (insert (concat ":BUILD: " *build* "\n"))
  (insert (concat ":PERSONALITY: "
                  *special1* "\n "
                  *special2* "\n "
                  *trait1* "\n"
                  *trait2* "\n"
                  )
          )
  (insert (concat ":ORIENTATION: " *orientation* "\n"))
  (insert (concat ":RELATIONSHIP: " *relationstatus* "\n"))
  (insert (concat ":RELIGION: " *religion* "\n"))
  (insert (concat ":QUIRK: " *quirk* "\n"))
  (insert (concat ":HOOK: " *hook* "\n"))
  (insert (concat ":STR: " (number-to-string *str*) "\n"))
  (insert (concat ":DEX: " (number-to-string *dex*) "\n"))
  (insert (concat ":CON: " (number-to-string *con*) "\n"))
  (insert (concat ":INT: " (number-to-string *int*) "\n"))
  (insert (concat ":WIS: " (number-to-string *wis*) "\n"))
  (insert (concat ":CHA: " (number-to-string *cha*) "\n"))
  )

(defun npc-generate-female
    (&optional race)
  "Creates an npc with an specified Gender or Race.
   Gender can be M or F.
   Race can be Dragonborn, Dwarf, Elf, Gnome, Halfling,
   Half-elf, Half-orc, Human, Tiefling.
   "
  (interactive)
  (setf *gender* "F")
  (setf *race* nil)
  ;; set race
  (if (string-equal race nil)
      (setf *race*
            (seq-random-elt *charrace*)
            )
    (setf *race* race)
    )
  ;; Race conditionals
  (if (string-equal *race* "Dragonborn")
      (dragonborn-race *gender*))
  (if (string-equal *race* "Dwarf")
      (dwarf-race *gender*))
  (if (string-equal *race* "Elf")
      (elf-race *gender*))
  (if (string-equal *race* "Gnome")
      (gnome-race *gender*))
  (if (string-equal *race* "Halfling")
      (halfling-race *gender*))
  (if (string-equal *race* "Half-elf")
      (half-elf-race *gender*))
  (if (string-equal *race* "Half-orc")
      (half-orc-race *gender*))
  (if (string-equal *race* "Human")
      (human-race *gender*))
  (if (string-equal *race* "Tiefling")
      (tiefling-race *gender*)
    )
  ;; Write Stats to screen
  (insert (concat ":NAME: " *name* "\n"))
  (insert (concat ":RACE: " *race* "\n"))
  (insert (concat ":SEX: " *gender* "\n"))
  (insert (concat ":AGE: " (number-to-string *age*) "\n"))
  (insert (concat ":OCCUPATION: "  *occupation* "\n"))
  (insert (concat ":FACE: " *face* "\n"))
  (insert (concat ":HAIR: " *hair* "\n"))
  (insert (concat ":SKIN: " *skin* "\n"))
  (insert (concat ":EYES: " *eyes* "\n"))
  (insert (concat ":HEIGHT: " (inches-to-feet *height*) "\n"))
  (insert (concat ":BUILD: " *build* "\n"))
  (insert (concat ":PERSONALITY: "
                  *special1* "\n "
                  *special2* "\n "
                  *trait1* "\n"
                  *trait2* "\n"
                  )
          )
  (insert (concat ":ORIENTATION: " *orientation* "\n"))
  (insert (concat ":RELATIONSHIP: " *relationstatus* "\n"))
  (insert (concat ":RELIGION: " *religion* "\n"))
  (insert (concat ":QUIRK: " *quirk* "\n"))
  (insert (concat ":HOOK: " *hook* "\n"))
  (insert (concat ":STR: " (number-to-string *str*) "\n"))
  (insert (concat ":DEX: " (number-to-string *dex*) "\n"))
  (insert (concat ":CON: " (number-to-string *con*) "\n"))
  (insert (concat ":INT: " (number-to-string *int*) "\n"))
  (insert (concat ":WIS: " (number-to-string *wis*) "\n"))
  (insert (concat ":CHA: " (number-to-string *cha*) "\n"))
  )

(define-minor-mode npc-gen-mode
  "Generates NPC's"
  :lighter "npc-gen"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "C-c r") 'npc-generate)
            (define-key map (kbd "C-c m") 'npc-generate-male)
            (define-key map (kbd "C-c f") 'npc-generate-female)
          map)
  )

(provide 'npc-gen-mode)

  
